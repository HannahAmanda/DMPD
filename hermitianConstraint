public void setHermitianConstraint(String row) {
		for(int i = 0; i < row.length(); i++) {
			switch (row.charAt(i)) {

			case '0': hermitianConstraint[i] = 0b00;
					  break;
			case '1': hermitianConstraint[i] = 0b01;
					  break;
			case 'v': hermitianConstraint[i] = 0b10;
					  break;
			case 'w': hermitianConstraint[i] = 0b11;
					  break;
			default: 
				
			}		
		}
	}
	
	public int[] getHermitianConstraint() {
		return hermitianConstraint;
	}
	
	public void findConstraintCodewords() {
		// TODO:
		/**
		 * This method is intended to compute the constraint
		 * each underlying factor node carries with the MetaNode.
		 * 
		 * After computations have been made, the MetaNode will 
		 * notify the factor node of its definition. 
		 * 
		 * Exponential: 4^n
		 * 
		 */
		
	}